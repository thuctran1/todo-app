import _extends from "@babel/runtime/helpers/extends";

/* eslint-disable */
export var daysMap = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
export var checkPositionInRange = function checkPositionInRange(item, range) {
  if (item === void 0) {
    item = 0;
  }

  if (range === void 0) {
    range = [1, 3];
  }

  var from = range[0];
  var to = range[1];
  if (item < from) return -1;
  if (item >= to) return 1;
  return 0;
};
export var getDayDetails = function getDayDetails(args, tagData) {
  if (tagData === void 0) {
    tagData = [];
  }

  var date = args.index - args.firstDay;
  var day = args.index % 7;
  var prevMonth = args.month - 1;
  var prevYear = args.year;

  if (prevMonth < 0) {
    prevMonth = 11;
    prevYear--;
  }

  var prevMonthNumberOfDays = getNumberOfDays(prevYear, prevMonth);

  var _date = (date < 0 ? prevMonthNumberOfDays + date : date % args.numberOfDays) + 1;

  var inMonth = date < 0 ? -1 : date >= args.numberOfDays ? 1 : 0; // -1 ngày của tháng trước . 0 ngày của tháng hiện tại. 1 ngày của tháng sau.

  var timestamp = new Date(args.year, args.month, _date).getTime();
  var indexTagData = tagData.find(function (t) {
    var dateData = getDateFromDateString(t.date, '-');
    if (!dateData) return false;
    var date = dateData.date,
        month = dateData.month,
        year = dateData.year;
    var monthCurent = 0;

    switch (inMonth) {
      case -1:
        monthCurent = args.month > 0 ? args.month : 12;
        break;

      case 0:
        monthCurent = args.month + 1;
        break;

      case 0:
        monthCurent = args.month < 11 ? args.month + 2 : 1;
        break;
    }

    return date === _date && month === monthCurent && year === args.year;
  });
  var defaultColor = {
    tagColor: '#808089',
    tagInactiveColor: 'rgba(166, 166, 176, 0.6)'
  };
  var data = indexTagData ? _extends({}, defaultColor, indexTagData) : defaultColor;
  return _extends({}, data, {
    date: _date,
    day: day,
    inMonth: inMonth,
    timestamp: timestamp,
    dayString: daysMap[day]
  });
};
export var getNumberOfDays = function getNumberOfDays(year, month) {
  return 40 - new Date(year, month, 40).getDate();
};
export var getMonthDetails = function getMonthDetails(year, month, tagData) {
  if (tagData === void 0) {
    tagData = [];
  }

  var firstDay = new Date(year, month).getDay();
  var numberOfDays = getNumberOfDays(year, month);
  var monthArray = [];
  var rows = 5;
  var currentDay = null;
  var index = 0;
  var cols = 7;

  for (var row = 0; row < rows; row++) {
    for (var col = 0; col < cols; col++) {
      currentDay = getDayDetails({
        index: index,
        numberOfDays: numberOfDays,
        firstDay: firstDay,
        year: year,
        month: month
      }, tagData);
      monthArray.push(currentDay);
      index++;
    }
  }

  var lastDateCalendar = monthArray[rows * cols - 1].date;
  var numsDateRest = lastDateCalendar >= 28 ? numberOfDays - lastDateCalendar : -1;

  if (numsDateRest > 0) {
    for (var i = 0; i < numsDateRest; i++) {
      currentDay = getDayDetails({
        index: index,
        numberOfDays: numberOfDays,
        firstDay: firstDay,
        year: year,
        month: month
      }, tagData);
      monthArray.push(currentDay);
      index++;
    }
  }

  return monthArray;
};
export var getDateFromDateString = function getDateFromDateString(dateValue, _char) {
  if (_char === void 0) {
    _char = '/';
  }

  var dateData = dateValue.split(_char).map(function (d) {
    return parseInt(d, 10);
  });
  if (dateData.length < 3) return null;
  var year = dateData[2];
  var month = dateData[1];
  var date = dateData[0];
  return {
    year: year,
    month: month,
    date: date
  };
};
export var getDateStringFromTimestamp = function getDateStringFromTimestamp(timestamp, _char2) {
  if (_char2 === void 0) {
    _char2 = '/';
  }

  var dateObject = new Date(timestamp);
  var month = dateObject.getMonth() + 1;
  var date = dateObject.getDate();
  return (date < 10 ? '0' + date : date) + _char2 + (month < 10 ? '0' + month : month) + _char2 + dateObject.getFullYear();
};