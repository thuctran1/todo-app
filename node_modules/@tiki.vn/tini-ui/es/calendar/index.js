import _extends from "@babel/runtime/helpers/extends";
import { getMonthDetails, checkPositionInRange } from './helper.js';
import { getI18nByLocale } from '../_util/getI18n';
var date = new Date();
var todayTimestamp = date.getTime();
var year = date.getFullYear();
var month = date.getMonth();
var colorMap = ['#808089', '#1A94FF'];
var FROM = 0;
var TO = 1;
Component({
  data: {
    days: [],
    monthMap: [],
    colorMap: colorMap,
    monthStr: '',
    year: year,
    month: month,
    todayTimestamp: todayTimestamp,
    selectedDate: [],
    monthDetails: []
  },
  props: {
    style: '',
    className: '',
    locale: 'vi',
    tagData: [],
    mode: 'timeOnly',
    // single - range - timeOnly
    header: 'month',
    // year - month
    selectedDate: [],
    iconColor: '#1A94FF',
    disabledPastDays: false,
    validDates: [],
    showOnlyInMonth: false,
    onSelect: function onSelect() {},
    onChange: function onChange() {}
  },
  methods: {
    _onSelect: function _onSelect(event) {
      var item = event.target.dataset.item;
      var mode = this.props.mode;

      if (mode === 'timeOnly') {
        return;
      }

      if (mode === 'single') {
        this.onSelectSingleDate(item);
      }

      if (mode === 'range') {
        this.onSelectRangeDate(item);
      }
    },
    onSelectSingleDate: function onSelectSingleDate(item) {
      this.setData({
        selectedDate: [item.timestamp]
      });
      this.props.onSelect({
        dates: [item.timestamp]
      });
    },
    onSelectRangeDate: function onSelectRangeDate(item) {
      var selectedDate = this.data.selectedDate;
      var dates = [];

      if (selectedDate.length === 0) {
        dates = [item.timestamp];
      }

      if (selectedDate.length === 1) {
        dates = [Math.min(item.timestamp, selectedDate[FROM]), Math.max(item.timestamp, selectedDate[FROM])];
      }

      if (selectedDate.length === 2) {
        var positionItem = checkPositionInRange(item.timestamp, selectedDate);

        switch (positionItem) {
          case -1:
            // selected - from - to
            dates = [item.timestamp, selectedDate[TO]];
            break;

          case 1:
            //  from - to - selected
            dates = [selectedDate[TO], item.timestamp];
            break;

          case 0:
            // from - selected - to
            dates = [selectedDate[FROM], item.timestamp]; // case này tuỳ vào BA

            break;

          default:
            break;
        }
      }

      this.setData({
        selectedDate: dates
      });
      this.props.onSelect({
        dates: dates
      });
    },
    getMonthStr: function getMonthStr(month, monthMap) {
      return monthMap[month] || 'Month';
    },
    setYear: function setYear(event) {
      var offset = event.target.dataset.offset;
      var year = this.data.year + offset;
      var month = this.data.month;
      this.setData({
        year: year,
        monthDetails: getMonthDetails(year, month, this.props.tagData)
      });
      var rs = {
        dates: [].concat(this.data.selectedDate),
        year: year,
        month: month + 1
      };
      this.props.onChange(rs);
    },
    setMonth: function setMonth(event) {
      var offset = event.target.dataset.offset;
      var locale = this.props.locale;
      var i18N = getI18nByLocale(locale);
      var year = this.data.year;
      var month = this.data.month + offset;

      if (month === -1) {
        month = 11;
        year--;
      } else if (month === 12) {
        month = 0;
        year++;
      }

      var monthStr = this.getMonthStr(month, i18N.months);
      this.setData({
        year: year,
        month: month,
        monthDetails: getMonthDetails(year, month, this.props.tagData),
        monthStr: monthStr
      });
      var rs = {
        dates: [].concat(this.data.selectedDate),
        year: year,
        month: month + 1
      };
      this.props.onChange(rs);
    },
    initDataCalender: function initDataCalender(data) {
      var selectedDate = data.selectedDate,
          tagData = data.tagData,
          locale = data.locale;
      var i18N = getI18nByLocale(locale);
      var monthStr = this.getMonthStr(month, i18N.months);
      var keysNoSelected = {
        days: i18N.days,
        monthMap: i18N.months,
        monthDetails: getMonthDetails(year, month, tagData),
        monthStr: monthStr
      };
      var keysData = keysNoSelected;

      if (selectedDate[FROM]) {
        var _date = new Date(selectedDate[FROM]);

        var _year = _date.getFullYear();

        var _month = _date.getMonth();

        var _monthStr = this.getMonthStr(_month, i18N.months);

        keysData = _extends({}, keysNoSelected, {
          selectedDate: selectedDate,
          year: _year,
          month: _month,
          monthDetails: getMonthDetails(_year, _month, tagData),
          monthStr: _monthStr
        });
      }

      this.setData(keysData);
    }
  },
  didMount: function didMount() {
    this.initDataCalender(this.props);
  },
  deriveDataFromProps: function deriveDataFromProps(nextProps) {
    if (JSON.stringify(this.props) === JSON.stringify(nextProps)) return;
    this.initDataCalender(nextProps);
  }
});