function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

import { selectAsync, selectAllAsync } from '../_util/query';
Component({
  data: {
    tabTop: 0,
    wrapScrollTop: 0
  },
  props: {
    activeItem: 0,
    className: '',
    width: '124px',
    items: [],
    direction: 'horizontal',
    animated: false,
    swipeable: false,
    sidebarInactiveTextColor: '#808089',
    sidebarActiveTextColor: '#1A94FF',
    sidebarActiveBgColor: '#ffffff',
    sidebarInactiveBgColor: '#f5f5f5',
    sidebarlineColor: '#1A94FF',
    sidebarActiveIconColor: '#1A94FF',
    sidebarInactiveIconColor: '#c4c4cf',
    sidebarlineShow: false
  },
  didMount: function didMount() {
    this.isScrolling = false;
    this.onlyChangeTab = false;
    this.timerId = null;
    this.calcHeight();
    var _this$props = this.props,
        items = _this$props.items,
        activeItem = _this$props.activeItem,
        activeChild = _this$props.activeChild;

    if (activeChild) {
      if (items[activeItem][activeChild]) {
        this.setData({
          wrapScrollTop: this.anchorMap[items[activeItem][activeChild].anchor]
        });
      } else {
        console.warn('The anchor is invalid. Make sure your child has anchor');
      }
    } else {
      this.setData({
        wrapScrollTop: this.anchorMap[items[activeItem].anchor]
      });
    }

    this.moveScrollBar(activeItem);
  },
  didUpdate: function didUpdate(prevProps) {
    var _this$props2 = this.props,
        activeItem = _this$props2.activeItem,
        items = _this$props2.items,
        activeChild = _this$props2.activeChild;

    if (items.length !== prevProps.items.length || activeItem !== prevProps.activeItem || activeChild !== prevProps.activeChild) {
      this.calcHeight();
    }
  },
  didUnmount: function didUnmount() {
    if (this.timerId) {
      clearTimeout(this.timerId);
      this.timerId = null;
    }
  },
  methods: {
    onWrapTouch: function onWrapTouch() {
      this.calcHeight();
    },
    calcHeight: function calcHeight() {
      var _this = this;

      this.anchorMap = {};
      this.indexMap = {};
      this.indexTop = {};
      this.wrapHeight = 0;
      this.scrollWrapHeight = 0; // Select left sidebar

      selectAsync(".tu-sidebar-slides-" + this.$id).then(function (slides) {
        _this.wrapHeight = slides.height;
        var items = _this.props.items || []; // Select content

        var allSlideSelector = items.reduce(function (arr, tab) {
          if ((tab.children || []).length === 0) {
            arr.push("#tu-sidebar-slide-" + tab.anchor);
          } else {
            var children = tab.children.map(function (child) {
              return "#tu-sidebar-slide-" + child.anchor;
            });
            arr.push.apply(arr, children);
          }

          return arr;
        }, []).join(',');
        selectAllAsync(allSlideSelector).then(function (allSlide) {
          var rects = allSlide.sort(function (a, b) {
            return a.top - b.top;
          }); // Init anchorMap

          for (var i = 0; i < items.length; i += 1) {
            if ((items[i].children || []).length) {
              for (var _iterator = _createForOfIteratorHelperLoose(items[i].children), _step; !(_step = _iterator()).done;) {
                var child = _step.value;
                _this.anchorMap[child.anchor] = 0;
              }
            } else {
              _this.anchorMap[items[i].anchor] = 0;
            }
          } // Init height


          var prevHeight = 0;
          Object.keys(_this.anchorMap).forEach(function (key, i) {
            var height = rects[i].height;
            _this.indexMap[i] = height;
            _this.anchorMap[key] = prevHeight;

            if (i === 0) {
              _this.indexTop[0] = 0;
            } else {
              var _rects;

              _this.indexTop[i] = _this.indexTop[i - 1] + Math.floor((_rects = rects[i - 1]) == null ? void 0 : _rects.height);
            }

            prevHeight += Math.floor(height);
            _this.scrollWrapHeight = prevHeight;
          });
        });
      });
    },
    handleChildClick: function handleChildClick(e) {
      var _e$target$dataset = e.target.dataset,
          parent = _e$target$dataset.parent,
          index = _e$target$dataset.index;
      var _this$props3 = this.props,
          items = _this$props3.items,
          activeItem = _this$props3.activeItem,
          swipeable = _this$props3.swipeable,
          activeChild = _this$props3.activeChild,
          onChildClick = _this$props3.onChildClick;

      if (!this.isScrolling || !swipeable || this.onlyChangeTab) {
        if (activeItem !== parent || activeChild !== index) {
          onChildClick && onChildClick(parent, index);
        }

        var tabIndex = 0;
        items.some(function (item, idx) {
          if (idx === parent) {
            tabIndex += index;
            return true;
          }

          tabIndex += item.children ? item.children.length : 1;
          return false;
        }, 0);
        this.setData({
          wrapScrollTop: this.indexTop[tabIndex]
        });
      }
    },
    handleTabClick: function handleTabClick(e) {
      var _items$index$children;

      var index = e.target.dataset.index;
      var _this$props4 = this.props,
          activeItem = _this$props4.activeItem,
          onItemClick = _this$props4.onItemClick,
          swipeable = _this$props4.swipeable,
          items = _this$props4.items;

      if ((_items$index$children = items[index].children) != null && _items$index$children.length && onItemClick) {
        onItemClick(index);
        return;
      }

      if (!this.isScrolling || !swipeable || this.onlyChangeTab) {
        if (activeItem !== index && onItemClick) {
          onItemClick(index);
        }

        var tabIndex = -1;
        items.some(function (item, idx) {
          if (idx <= index) {
            tabIndex += item.children ? item.children.length : 1;
            return false;
          }

          return true;
        }, 0);
        this.setData({
          wrapScrollTop: this.indexTop[tabIndex]
        });
        this.moveScrollBar(index);
      }
    },
    moveScrollBar: function moveScrollBar(current) {
      var tabTop;

      if (current < 6) {
        tabTop = 0;
      } else {
        tabTop = (current - 5) * 36;
      }

      this.setData({
        tabTop: tabTop
      });
    }
  }
});