Component({
  data: {
    value: undefined,
    disableReduce: false,
    disableAdd: false
  },
  props: {
    className: '',
    value: 10,
    inputWidth: 40,
    step: 1,
    min: 0,
    max: 100000,
    disabled: false,
    readOnly: false,
    showNumber: true,
    vertical: false,
    controlled: true,
    iconColor: '#1A94FF',
    onChange: function onChange(value, mode) {}
  },
  didMount: function didMount() {
    this.resetFn(this.props.value, 'didMount');
  },
  didUpdate: function didUpdate(preProps) {
    var value = this.props.value;

    if (preProps.value !== value) {
      this.resetFn(value, 'didUpdate');
    }
  },
  methods: {
    changeFn: function changeFn(e) {
      var _this$props = this.props,
          disabled = _this$props.disabled,
          step = _this$props.step;
      var _this$data = this.data,
          disableReduce = _this$data.disableReduce,
          disableAdd = _this$data.disableAdd,
          value = _this$data.value;
      var type = e.target.dataset.type;

      if (disabled || type === 'add' && disableAdd || type === 'reduce' && disableReduce) {
        return;
      }

      var newValue = this.getCalculateValue(type, +value, +step);
      this.resetFn(newValue, 'click');
    },
    onInput: function onInput(e) {
      var value = parseFloat(e.detail.value) || this.props.min;
      this.resetFn(value, 'input');
    },
    onBlur: function onBlur(e) {
      var value = parseFloat(e.detail.value) || this.props.min;
      this.resetFn(value, 'blur');
    },
    resetFn: function resetFn(value, mode) {
      var _this$props2 = this.props,
          max = _this$props2.max,
          min = _this$props2.min,
          onChange = _this$props2.onChange;
      var newValue = Math.min(max, Math.max(min, value));
      var disableAdd = newValue >= max;
      var disableReduce = newValue <= min;
      this.setData({
        value: newValue,
        disableAdd: disableAdd,
        disableReduce: disableReduce
      });

      if (onChange) {
        onChange(newValue, mode);
      }
    },
    getCalculateValue: function getCalculateValue(type, arg1, arg2) {
      var numFloat = arg1.toString().split('.')[1] || '';
      var num2Float = arg2.toString().split('.')[1] || '';
      var length = Math.max(numFloat.length, num2Float.length);
      var times = Math.pow(10, length);
      var result = type === 'reduce' ? ((+arg1 * times - +arg2 * times) / times).toFixed(length) : ((+arg1 * times + +arg2 * times) / times).toFixed(length);
      return parseFloat(result);
    }
  }
});