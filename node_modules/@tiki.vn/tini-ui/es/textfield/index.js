import fmtClass from '../_util/fmtClass';
import fmtEvent from '../_util/fmtEvent';
import { debounce } from '../_util/debounce';
Component({
  data: {
    paddingHorizontal: 16,
    iconDisabledColor: 'var(--color-input-icon-disabled)',
    wrapClass: ''
  },
  props: {
    // Label props
    labelCls: '',
    showBadge: false,
    labelIcon: '',
    labelIconColor: '#808089',
    helperText: '',
    labelText: '',
    // Extra props
    iconRight: '',
    iconLeft: '',
    iconColor: 'var(--color-input-icon-default)',
    shape: 'rounded',
    loading: false,
    inputCls: '',
    className: '',
    errorMsg: '',
    readonly: false,
    // showErrorIcon: true,
    hasError: false,
    errorIconColor: '#ff424f',
    // Input props
    type: 'text',
    password: false,
    name: '',
    value: '',
    placeholder: '',
    placeholderClass: '',
    placeholderStyle: '',
    disabled: false,
    maxlength: 140,
    debounce: 0,
    focus: false,
    controlled: false,
    onTap: undefined,
    onTapRightIcon: undefined,
    onTapLeftIcon: undefined,
    onInput: undefined,
    onConfirm: undefined,
    onFocus: undefined,
    onBlur: undefined
  },
  onInit: function onInit() {
    this.onInput = debounce(this.onInput.bind(this), this.props.debounce);
    this.setData({
      wrapClass: this.getWrapClass(this.props)
    });
  },
  didUpdate: function didUpdate(prevProps) {
    if (this.isClassChange(prevProps, this.props)) {
      this.setData({
        wrapClass: this.getWrapClass(this.props)
      });
    }
  },
  methods: {
    getWrapClass: function getWrapClass(props) {
      var _fmtClass;

      var shape = props.shape,
          hasError = props.hasError;
      var ret = fmtClass((_fmtClass = {}, _fmtClass['error'] = hasError, _fmtClass['rounded'] = shape === 'rounded', _fmtClass['pill'] = shape === 'pill', _fmtClass));
      return ret;
    },
    isClassChange: function isClassChange(prevProps, nextProps) {
      return prevProps.shape !== nextProps.shape || prevProps.hasError !== nextProps.hasError;
    },
    onEvent: function onEvent(eventName, event) {
      var eventFunc = this.props[eventName];

      if (eventFunc && event) {
        var e = fmtEvent(this.props, event);
        eventFunc(e);
      }
    },
    onTap: function onTap(e) {
      this.onEvent('onTap', e);
    },
    onTapIconLeft: function onTapIconLeft(e) {
      this.onEvent('onTapIconLeft', e);
    },
    onTapIconRight: function onTapIconRight(e) {
      this.onEvent('onTapIconRight', e);
    },
    onBlur: function onBlur(e) {
      this.onEvent('onBlur', e);
    },
    onConfirm: function onConfirm(e) {
      this.onEvent('onConfirm', e);
    },
    onFocus: function onFocus(e) {
      this.onEvent('onFocus', e);
    },
    onInput: function onInput(e) {
      this.onEvent('onInput', e);
    }
  }
});