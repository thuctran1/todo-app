import fmtEvent from '../_util/fmtEvent';
// TODO: Handle multiple toast
Component({
  props: {
    type: 'success',
    // success, error, info
    iconLeft: '',
    closeIcon: 'close',
    show: false,
    showIconLeft: true,
    showCloseIcon: true,
    content: '',
    actionText: '',
    backgroundColor: '',
    // Default is based on type
    textColor: '#fff',
    // Apply for text, actionText, icon,...
    style: '',
    className: '',
    textClass: '',
    actionClass: '',
    closeButtonClass: '',
    iconCClass: '',
    image: '',
    // To replace icon
    duration: 3000,
    placement: 'bottom',
    // bottom, top
    top: '24px',
    bottom: '24px',
    zIndex: 999,
    animation: true,
    animationDuration: 300,
    onTapAction: function onTapAction() {},
    onClose: function onClose() {}
  },
  data: {
    icons: {
      success: 'success_glyph',
      error: 'warning_glyph',
      info: 'info_glyph'
    },
    toastBackground: '',
    showToast: false
  },
  didMount: function didMount() {
    var _this$props = this.props,
        backgroundColor = _this$props.backgroundColor,
        type = _this$props.type;

    if (backgroundColor) {
      this.setData({
        toastBackground: backgroundColor
      });
    } else {
      this.setData({
        toastBackground: {
          success: 'var(--color-alias-positive)',
          error: 'var(--color-alias-negative)',
          info: 'var(--color-alias-reverse-theme)'
        }[type] || 'var(--color-alias-positive)'
      });
    }

    this.checkShowToast();
  },
  deriveDataFromProps: function deriveDataFromProps() {
    this.checkShowToast();
  },
  didUnmount: function didUnmount() {
    if (this.timeout) {
      clearTimeout(this.timeout);
    }
  },
  methods: {
    timeout: null,
    isShowing: false,
    onTapAction: function onTapAction(event) {
      this.props.onTapAction(fmtEvent(this.props, event));
    },
    onTapClose: function onTapClose(event) {
      var _this = this;

      var onClose = this.props.onClose;
      clearTimeout(this.timeout);
      this.setData({
        showToast: false
      }, function () {
        return onClose(fmtEvent(_this.props, event));
      });
    },
    checkShowToast: function checkShowToast() {
      var _this2 = this;

      var _this$props2 = this.props,
          show = _this$props2.show,
          duration = _this$props2.duration,
          onClose = _this$props2.onClose;
      var showToast = this.data.showToast;

      if (!show || showToast) {
        return;
      }

      this.setData({
        showToast: true
      });

      if (this.timeout) {
        clearTimeout(this.timeout);
      }

      this.timeout = setTimeout(function () {
        _this2.setData({
          showToast: false
        }, function () {
          return onClose(fmtEvent(_this2.props));
        });
      }, duration);
    }
  }
});