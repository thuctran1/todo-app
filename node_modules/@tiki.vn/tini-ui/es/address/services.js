import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _regeneratorRuntime from "@babel/runtime/regenerator";
import API from '../_util/api';

var AddressServices = /*#__PURE__*/function () {
  function AddressServices(_ref) {
    var firstCities = _ref.firstCities;
    this.api = new API();
    this.baseUrl = 'https://api.tiki.vn/v2/directory';
    this.firstCities = ['Hồ Chí Minh', 'Hà Nội'];
    this.cities = [];
    this.districts = {};
    this.wards = {};

    if (firstCities) {
      this.firstCities = firstCities;
    }
  }

  var _proto = AddressServices.prototype;

  _proto.getCities = /*#__PURE__*/function () {
    var _getCities = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
      var _this$cities, _this$cities2, rs, firstCities, sorted;

      return _regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.prev = 0;

              if (!this.cities.length) {
                _context.next = 3;
                break;
              }

              return _context.abrupt("return", Promise.resolve(this.cities));

            case 3:
              _context.next = 5;
              return this.api.get(this.baseUrl + "/regions?country_id=vn");

            case 5:
              rs = _context.sent;
              firstCities = this.firstCities.reduce(function (acc, item) {
                acc[item] = {
                  id: 0,
                  name: ''
                };
                return acc;
              }, {});
              sorted = rs.data.reduce(function (arr, item) {
                if (firstCities[item.name]) {
                  firstCities[item.name] = item;
                } else {
                  arr.push(item);
                }

                return arr;
              }, []);

              (_this$cities = this.cities).push.apply(_this$cities, sorted);

              (_this$cities2 = this.cities).unshift.apply(_this$cities2, this.firstCities.map(function (k) {
                return firstCities[k];
              }));

              return _context.abrupt("return", this.cities);

            case 13:
              _context.prev = 13;
              _context.t0 = _context["catch"](0);
              return _context.abrupt("return", []);

            case 16:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this, [[0, 13]]);
    }));

    function getCities() {
      return _getCities.apply(this, arguments);
    }

    return getCities;
  }();

  _proto.getDistricts = /*#__PURE__*/function () {
    var _getDistricts = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(cityId) {
      var rs;
      return _regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _context2.prev = 0;

              if (!this.districts[cityId]) {
                _context2.next = 3;
                break;
              }

              return _context2.abrupt("return", this.districts[cityId]);

            case 3:
              _context2.next = 5;
              return this.api.get(this.baseUrl + "/districts?region_id=" + cityId);

            case 5:
              rs = _context2.sent;
              this.districts[cityId] = rs.data;
              return _context2.abrupt("return", this.districts[cityId]);

            case 10:
              _context2.prev = 10;
              _context2.t0 = _context2["catch"](0);
              return _context2.abrupt("return", []);

            case 13:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, this, [[0, 10]]);
    }));

    function getDistricts(_x) {
      return _getDistricts.apply(this, arguments);
    }

    return getDistricts;
  }();

  _proto.getWards = /*#__PURE__*/function () {
    var _getWards = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(districtId) {
      var rs;
      return _regeneratorRuntime.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              _context3.prev = 0;

              if (!this.wards[districtId]) {
                _context3.next = 3;
                break;
              }

              return _context3.abrupt("return", this.wards[districtId]);

            case 3:
              _context3.next = 5;
              return this.api.get(this.baseUrl + "/wards?district_id=" + districtId);

            case 5:
              rs = _context3.sent;
              this.wards[districtId] = rs.data;
              return _context3.abrupt("return", this.wards[districtId]);

            case 10:
              _context3.prev = 10;
              _context3.t0 = _context3["catch"](0);
              return _context3.abrupt("return", []);

            case 13:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3, this, [[0, 10]]);
    }));

    function getWards(_x2) {
      return _getWards.apply(this, arguments);
    }

    return getWards;
  }();

  return AddressServices;
}();

export { AddressServices as default };