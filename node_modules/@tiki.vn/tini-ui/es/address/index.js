import _extends from "@babel/runtime/helpers/extends";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _regeneratorRuntime from "@babel/runtime/regenerator";
import { isNotEmpty } from '../_util/validate';
import AddressService from './services';

var diffValue = function diffValue(value, newValue) {
  if (value === null || value === undefined) {
    return false;
  }

  var oldV = value.id ? value.id : value;
  var newV = newValue && newValue.id ? newValue.id : newValue;
  return oldV !== newV;
};

Component({
  props: {
    street: '',
    city: null,
    district: null,
    ward: null,
    listCities: null,
    streetLabel: 'Địa chỉ',
    streetPlaceholder: 'Địa chỉ',
    cityLabel: 'Tỉnh / Thành phố',
    cityPlaceholder: 'Chọn Tỉnh / Thành phố',
    districtLabel: 'Quận / Huyện',
    districtPlaceholder: 'Chọn Quận / Huyện',
    wardLabel: 'Phường / Xã',
    wardPlaceholder: 'Chọn Phường / Xã',
    streetErrorMsg: '',
    cityErrorMsg: '',
    districtErrorMsg: '',
    wardErrorMsg: '',
    showName: true,
    nameLabel: 'Tên người nhận',
    namePlaceholder: 'Nhập họ & tên người nhận',
    full_name: '',
    showPhone: true,
    phoneLabel: 'Số điện thoại liên lạc',
    phonePlaceholder: 'Nhập số điện thoại người nhận',
    phone_number: ''
  },
  data: {
    value: {
      street: '',
      city: null,
      district: null,
      ward: null,
      full_name: '',
      phone_number: ''
    },
    cities: [],
    districts: [],
    wards: [],
    isShowDropdown: false
  },
  didMount: function didMount() {
    var _this = this;

    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
      var firstCities;
      return _regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              firstCities = _this.props.firstCities;
              _this.addressService = new AddressService({
                firstCities: firstCities
              });

              _this.initDataFromProps(true);

            case 3:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }))();
  },
  deriveDataFromProps: function deriveDataFromProps(props) {
    if (this.isChangingData) {
      return;
    }

    var street = props.street,
        city = props.city,
        district = props.district,
        ward = props.ward,
        full_name = props.full_name,
        phone_number = props.phone_number,
        showPhone = props.showPhone,
        showName = props.showName;
    var diffStreet = street && diffValue(street, this.data.value.street);
    var diffCity = city && diffValue(city, this.data.value.city);
    var diffDistrict = district && diffValue(district, this.data.value.district);
    var diffWard = ward && diffValue(ward, this.data.value.ward);
    var diffName = showName && full_name !== this.data.value.full_name;
    var diffPhone = showPhone && phone_number !== this.data.value.phone_number;

    if (diffStreet || diffCity || diffDistrict || diffWard || diffName || diffPhone) {
      this.initDataFromProps(city && this.data.value.city && city !== this.data.value.city.id && city.id !== this.data.value.city.id);
    }
  },
  methods: {
    addressService: null,
    isChangingData: '',
    initDataFromProps: function initDataFromProps(isShowLoading) {
      var _this2 = this;

      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
        var _this2$props, _this2$props$street, street, city, district, ward, full_name, phone_number, showName, showPhone, listCities, promiseAll, value, _this2$data$cities$fi, _this2$data$districts, _this2$data$wards$fin;

        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _this2.isChangingData = true;
                _this2$props = _this2.props, _this2$props$street = _this2$props.street, street = _this2$props$street === void 0 ? '' : _this2$props$street, city = _this2$props.city, district = _this2$props.district, ward = _this2$props.ward, full_name = _this2$props.full_name, phone_number = _this2$props.phone_number, showName = _this2$props.showName, showPhone = _this2$props.showPhone, listCities = _this2$props.listCities;
                if (isShowLoading) my.showLoading({
                  content: 'Đang tải...'
                });
                promiseAll = [];

                if (listCities) {
                  _this2.setData({
                    cities: listCities
                  });
                } else {
                  promiseAll.push(_this2.getCities());
                }

                if (_this2.getId(city)) {
                  promiseAll.push(_this2.getDistricts(_this2.getId(city)));

                  if (_this2.getId(district)) {
                    promiseAll.push(_this2.getWards(_this2.getId(district)));
                  }
                }

                _context2.next = 8;
                return Promise.all(promiseAll);

              case 8:
                my.hideLoading();
                value = _extends({}, _this2.data.value, {
                  street: street
                });

                if (city) {
                  value.city = (_this2$data$cities$fi = _this2.data.cities.find(function (c) {
                    return c.id === _this2.getId(city);
                  })) != null ? _this2$data$cities$fi : null;
                }

                if (district) {
                  value.district = (_this2$data$districts = _this2.data.districts.find(function (c) {
                    return c.id === _this2.getId(district);
                  })) != null ? _this2$data$districts : null;
                }

                if (ward) {
                  value.ward = (_this2$data$wards$fin = _this2.data.wards.find(function (c) {
                    return c.id === _this2.getId(ward);
                  })) != null ? _this2$data$wards$fin : null;
                }

                if (showName) {
                  value.full_name = full_name != null ? full_name : '';
                }

                if (showPhone) {
                  value.phone_number = phone_number != null ? phone_number : '';
                }

                _this2.setData({
                  value: value
                });

                _this2.isChangingData = false;

              case 17:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }))();
    },
    getId: function getId(item) {
      if (!item) {
        return null;
      }

      return typeof item === 'number' || typeof item === 'string' ? +item : item && item['id'];
    },
    onTapDropdown: function onTapDropdown() {
      this.setData({
        isShowDropdown: true
      });
    },
    onHideDropdown: function onHideDropdown() {
      this.setData({
        isShowDropdown: false
      });
    },
    getCities: function getCities() {
      var _this3 = this;

      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {
        var cities;
        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.next = 2;
                return _this3.addressService.getCities();

              case 2:
                cities = _context3.sent;

                _this3.setData({
                  cities: cities
                });

              case 4:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3);
      }))();
    },
    getDistricts: function getDistricts(cityId) {
      var _this4 = this;

      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {
        var districts;
        return _regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                _context4.next = 2;
                return _this4.addressService.getDistricts(cityId);

              case 2:
                districts = _context4.sent;

                _this4.setData({
                  districts: districts
                });

              case 4:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4);
      }))();
    },
    getWards: function getWards(districtId) {
      var _this5 = this;

      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {
        var wards;
        return _regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                _context5.next = 2;
                return _this5.addressService.getWards(districtId);

              case 2:
                wards = _context5.sent;

                _this5.setData({
                  wards: wards
                });

              case 4:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5);
      }))();
    },
    onChangeAddress: function onChangeAddress() {
      var _this6 = this;

      var _this$props = this.props,
          onChangeAddress = _this$props.onChangeAddress,
          onFullAddress = _this$props.onFullAddress,
          showName = _this$props.showName,
          showPhone = _this$props.showPhone;
      var value = this.data.value;
      var street = value.street,
          city = value.city,
          district = value.district,
          ward = value.ward,
          full_name = value.full_name,
          phone_number = value.phone_number;

      var data = _extends({
        street: street,
        city: city,
        district: district,
        ward: ward
      }, showName ? {
        full_name: full_name
      } : {}, showPhone ? {
        phone_number: phone_number
      } : {});

      onChangeAddress && onChangeAddress(data);

      if (onFullAddress) {
        var isFull = [isNotEmpty(data.street), isNotEmpty(data.city), isNotEmpty(data.district), isNotEmpty(data.ward), showName ? isNotEmpty(data.full_name) : true, showPhone ? isNotEmpty(data.phone_number) : true].indexOf(false) < 0;
        isFull && onFullAddress(data);
      }

      setTimeout(function () {
        _this6.onHideDropdown();
      }, 100);
      this.isChangingData = false;
    },
    changeStreet: function changeStreet(e) {
      var _this7 = this;

      this.isChangingData = true;
      var street = e.detail.value;
      this.setData({
        value: _extends({}, this.data.value, {
          street: street
        })
      }, function () {
        if (_this7.props.onChangeStreet) {
          _this7.props.onChangeStreet(street);
        }

        _this7.onChangeAddress();
      });
    },
    changeName: function changeName(e) {
      var _this8 = this;

      this.isChangingData = true;
      var full_name = e.detail.value;
      this.setData({
        value: _extends({}, this.data.value, {
          full_name: full_name
        })
      }, function () {
        if (_this8.props.onChangeName) {
          _this8.props.onChangeName(full_name);
        }

        _this8.onChangeAddress();
      });
    },
    changePhone: function changePhone(e) {
      var _this9 = this;

      this.isChangingData = true;
      var phone_number = e.detail.value;
      this.setData({
        value: _extends({}, this.data.value, {
          phone_number: phone_number
        })
      }, function () {
        if (_this9.props.onChangePhone) {
          _this9.props.onChangePhone(phone_number);
        }

        _this9.onChangeAddress();
      });
    },
    selectCity: function selectCity(city) {
      var _this10 = this;

      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {
        var value;
        return _regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                _this10.isChangingData = true;
                value = _extends({}, _this10.data.value, {
                  city: city,
                  district: null,
                  ward: null
                });

                _this10.setData({
                  value: value,
                  wards: []
                }, function () {
                  if (_this10.props.onChangeCity) {
                    _this10.props.onChangeCity(city);
                  }

                  _this10.onChangeAddress();
                });

                _this10.getDistricts(city.id);

              case 4:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6);
      }))();
    },
    selectDistrict: function selectDistrict(district) {
      var _this11 = this;

      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7() {
        var value;
        return _regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                _this11.isChangingData = true;
                value = _extends({}, _this11.data.value, {
                  district: district,
                  ward: null
                });

                _this11.setData({
                  value: value
                }, function () {
                  if (_this11.props.onChangeDistrict) {
                    _this11.props.onChangeDistrict(district);
                  }

                  _this11.onChangeAddress();
                });

                _this11.getWards(district.id);

              case 4:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7);
      }))();
    },
    selectWard: function selectWard(ward) {
      var _this12 = this;

      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8() {
        var value;
        return _regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                _this12.isChangingData = true;
                value = _extends({}, _this12.data.value, {
                  ward: ward
                });

                _this12.setData({
                  value: value
                }, function () {
                  if (_this12.props.onChangeWard) {
                    _this12.props.onChangeWard(ward);
                  }

                  _this12.onChangeAddress();
                });

              case 3:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8);
      }))();
    }
  }
});