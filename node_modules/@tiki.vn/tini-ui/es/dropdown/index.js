import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _regeneratorRuntime from "@babel/runtime/regenerator";
import { isHasValue } from '../_util/validate';
import { debounce } from '../_util/debounce';
import compareNormalize from '../_util/search';
import { getSystemInfoAsync } from '../_util/system';
var BottomSheetHeaderHeight = 40;
Component({
  props: {
    placeholder: '',
    disabled: false,
    shape: 'rounded',
    loading: false,
    inputCls: '',
    className: '',
    items: [],
    labelKey: 'name',
    idKey: 'id',
    showSearch: false,
    searchPlaceholder: 'Tìm kiếm',
    labelText: '',
    closeAfterSelect: true,
    useBottomSheet: true,
    showCheck: true,
    bottomSheetHeight: null,
    bottomSheetTitle: 'Dropdown',
    bottomSheetButton: 'Chọn',
    bottomSheetDistanceFromTop: 100,
    maskClose: true,
    multiple: false,
    showNotFound: false,
    notFoundImage: 'https://salt.tikicdn.com/ts/tiniapp/58/79/5e/b6dd5791d8bcb9a96b23a694747eb1d4.png',
    onSelect: function onSelect() {}
  },
  data: {
    searchItems: [],
    searchText: '',
    label: '',
    showBottomSheet: false,
    localValue: null,
    isTextFieldFocusing: false
  },
  didUpdate: function didUpdate(prevProps) {
    var _this$props = this.props,
        onSearch = _this$props.onSearch,
        items = _this$props.items;
    var searchText = this.data.searchText; // TODO: Deep compare items

    if (onSearch && JSON.stringify(items) !== JSON.stringify(prevProps.items)) {
      this.setData({
        searchItems: items
      });
    } else if (prevProps.items.length !== items.length) {
      searchText ? this.onSearch(searchText) : this.setData({
        searchItems: items
      });
    }
  },
  deriveDataFromProps: function deriveDataFromProps(_ref) {
    var value = _ref.value,
        labelKey = _ref.labelKey,
        items = _ref.items,
        idKey = _ref.idKey,
        multiple = _ref.multiple;
    var _this$data = this.data,
        localValue = _this$data.localValue,
        localLabel = _this$data.label;
    var label = localLabel;

    if (multiple) {
      label = (value || []).map(function (v) {
        return typeof v === 'object' ? v[labelKey] : v;
      }).join(', ');
    } else {
      var _value$labelKey, _items$find;

      label = value && typeof value === 'object' ? (_value$labelKey = value[labelKey]) != null ? _value$labelKey : (_items$find = items.find(function (i) {
        return i[idKey] === value[idKey];
      })) == null ? void 0 : _items$find[labelKey] : value;
    }

    if (label !== localLabel) {
      this.setData({
        label: label
      });
    }

    if (isHasValue(value) && JSON.stringify(value) !== JSON.stringify(localValue)) {
      this.setData({
        localValue: value
      });
    }
  },
  didMount: function didMount() {
    var _this = this;

    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
      var _this$props2, items, value, multiple, bottomSheetHeight, bottomSheetDistanceFromTop, showSearch, data, sysInfo;

      return _regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _this.onSearch = debounce(_this.onSearch.bind(_this));
              _this$props2 = _this.props, items = _this$props2.items, value = _this$props2.value, multiple = _this$props2.multiple, bottomSheetHeight = _this$props2.bottomSheetHeight, bottomSheetDistanceFromTop = _this$props2.bottomSheetDistanceFromTop, showSearch = _this$props2.showSearch;
              data = {
                searchItems: items,
                localValue: value || (multiple ? [] : '')
              };
              _context.next = 5;
              return getSystemInfoAsync();

            case 5:
              sysInfo = _context.sent;

              if (bottomSheetHeight) {
                data.bottomSheetContainerHeight = bottomSheetHeight;
                data.bottomSheetScrollViewHeight = bottomSheetHeight - (showSearch ? 60 : 0) - (multiple ? 100 : 0) - BottomSheetHeaderHeight;
              } else {
                data.bottomSheetContainerHeight = sysInfo.windowHeight - bottomSheetDistanceFromTop;
                data.bottomSheetScrollViewHeight = data.bottomSheetContainerHeight - (showSearch ? 60 : 0) - (multiple ? 100 : 0) - BottomSheetHeaderHeight;
              }

              _this.setData(data);

            case 8:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }))();
  },
  methods: {
    onSearch: function onSearch(text) {
      var _this$props3 = this.props,
          items = _this$props3.items,
          labelKey = _this$props3.labelKey;
      var searched = items.filter(function (i) {
        return compareNormalize(typeof i === 'object' ? i[labelKey] : i, text);
      });
      this.setData({
        searchItems: searched
      });
    },
    onChangeSearchText: function onChangeSearchText(event) {
      var onSearch = this.props.onSearch;
      var value = event.detail.value;

      if (onSearch) {
        onSearch(value);
      } else {
        this.setData({
          searchText: value
        });
        this.onSearch(value);
      }
    },
    onTap: function onTap(e) {
      var _this$props4 = this.props,
          disabled = _this$props4.disabled,
          onTap = _this$props4.onTap,
          useBottomSheet = _this$props4.useBottomSheet;

      if (disabled) {
        return;
      }

      if (useBottomSheet) {
        this.setData({
          showBottomSheet: true
        });
      }

      onTap && onTap(e);
    },
    onClose: function onClose() {
      var _this2 = this;

      var _this$props5 = this.props,
          multiple = _this$props5.multiple,
          onHideDropdown = _this$props5.onHideDropdown;

      if (multiple) {
        this.hideBottomSheet(function () {
          _this2.setData({
            localValue: _this2.props.value || []
          });
        });
      } else {
        this.hideBottomSheet();
      }

      onHideDropdown && onHideDropdown();
    },
    hideBottomSheet: function hideBottomSheet(callback) {
      if (callback === void 0) {
        callback = function callback() {};
      }

      this.setData({
        showBottomSheet: false,
        searchText: '',
        searchItems: this.props.items
      }, callback);
    },
    onSelect: function onSelect(event) {
      var _this3 = this;

      var _this$props6 = this.props,
          multiple = _this$props6.multiple,
          value = _this$props6.value,
          idKey = _this$props6.idKey,
          closeAfterSelect = _this$props6.closeAfterSelect,
          onSelect = _this$props6.onSelect;
      var localValue = this.data.localValue;
      var item = event.target.dataset.item;

      if (multiple) {
        var existedIndex = localValue.findIndex(function (v) {
          return typeof item === 'object' ? v[idKey] === item[idKey] : v === item;
        });
        this.setData({
          localValue: existedIndex > -1 ? localValue.filter(function (_v, i) {
            return i !== existedIndex;
          }) : [].concat(localValue, [item])
        });
      } else if (!value || item !== value || typeof item === 'object' && item[idKey] !== value[idKey]) {
        this.setData({
          localValue: item
        }, function () {
          onSelect(item);
          closeAfterSelect && _this3.hideBottomSheet();
        });
      }
    },
    onSelectMultiple: function onSelectMultiple() {
      this.props.onSelect(this.data.localValue);
      this.hideBottomSheet();
    },
    onTextFieldFocus: function onTextFieldFocus() {
      this.setData({
        isTextFieldFocusing: true
      });
    },
    onTextFieldBlur: function onTextFieldBlur() {
      this.setData({
        isTextFieldFocusing: false
      });
    }
  }
});