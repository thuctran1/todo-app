import _extends from "@babel/runtime/helpers/extends";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _regeneratorRuntime from "@babel/runtime/regenerator";

var API = /*#__PURE__*/function () {
  function API(params) {
    this.appId = '';
    this.userAgent = 'TikiNative';
    this.headers = {};

    var _ref = params || {},
        appId = _ref.appId,
        userAgent = _ref.userAgent;

    this.setAppId(appId);

    if (userAgent) {
      this.setUserAgent(userAgent);
    }
  }

  var _proto = API.prototype;

  _proto.setHeaders = function setHeaders(headers) {
    this.headers = headers;
  };

  _proto.setAppId = function setAppId(appId) {
    this.appId = appId;
  };

  _proto.setUserAgent = function setUserAgent(userAgent) {
    this.userAgent = userAgent;
  };

  _proto.request = /*#__PURE__*/function () {
    var _request = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(url, _ref2) {
      var _this = this;

      var _ref2$method, method, data, _ref2$headers, headers;

      return _regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _ref2$method = _ref2.method, method = _ref2$method === void 0 ? 'GET' : _ref2$method, data = _ref2.data, _ref2$headers = _ref2.headers, headers = _ref2$headers === void 0 ? {} : _ref2$headers;
              return _context.abrupt("return", new Promise(function (resolve, reject) {
                my.request({
                  url: url,
                  method: method,
                  data: data,
                  headers: _extends({
                    'Content-Type': 'application/json',
                    'X-App-Identifier': _this.appId,
                    'User-Agent': _this.userAgent
                  }, headers),
                  success: function success(res) {
                    resolve(res);
                  },
                  fail: function fail(e) {
                    reject(e);
                  }
                });
              }));

            case 2:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    function request(_x, _x2) {
      return _request.apply(this, arguments);
    }

    return request;
  }();

  _proto.get = /*#__PURE__*/function () {
    var _get = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(url, params) {
      return _regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              return _context2.abrupt("return", this.request(url, {
                method: 'GET',
                headers: params == null ? void 0 : params.headers
              }));

            case 1:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, this);
    }));

    function get(_x3, _x4) {
      return _get.apply(this, arguments);
    }

    return get;
  }();

  _proto.post = /*#__PURE__*/function () {
    var _post = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(url, params) {
      return _regeneratorRuntime.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              return _context3.abrupt("return", this.request(url, {
                method: 'POST',
                data: params == null ? void 0 : params.data,
                headers: params == null ? void 0 : params.headers
              }));

            case 1:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3, this);
    }));

    function post(_x5, _x6) {
      return _post.apply(this, arguments);
    }

    return post;
  }();

  return API;
}();

export { API as default };