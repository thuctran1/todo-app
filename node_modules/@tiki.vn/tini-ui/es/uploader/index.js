import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _regeneratorRuntime from "@babel/runtime/regenerator";
var MAX_COUNT = 1;
Component({
  props: {
    className: '',
    style: '',
    value: '',
    icon: 'placeholder',
    iconSize: 40,
    showPreview: true,
    disabled: false,
    sourceType: ['camera', 'album'],
    onChange: function onChange() {}
  },
  data: {
    images: []
  },
  methods: {
    handleSelectImage: function handleSelectImage() {
      var _this = this;

      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
        var _this$props, sourceType, onChange;

        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _this$props = _this.props, sourceType = _this$props.sourceType, onChange = _this$props.onChange;
                my.chooseImage({
                  sourceType: sourceType,
                  success: function success(_ref) {
                    var tempFiles = _ref.tempFiles;
                    if (!tempFiles.length || tempFiles.length > MAX_COUNT) return;

                    _this.setData({
                      images: tempFiles
                    });

                    onChange(tempFiles);
                  }
                });

              case 2:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }))();
    },
    handleRemoveImage: function handleRemoveImage() {
      var onChange = this.props.onChange;
      this.setData({
        images: []
      });
      onChange([]);
    }
  },
  didMount: function didMount() {
    var value = this.props.value;

    if (value) {
      this.setData({
        images: [{
          path: value
        }]
      });
    }
  }
});
export {};